package com.freshdirect.smartstore.external;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * An entity holding the id the optional tracking id of a recommended item. It
 * may hold optional properties in {@link #properties} map.
 * 
 * @author csongor
 */
public class RecommendationItem implements Serializable {
	private static final long serialVersionUID = 277621444813085208L;

	/**
	 * Id of the recommended (product) item
	 */
	private final String id;

	/**
	 * A tracking id generated by the external recommender for tracking the
	 * recommendation (optional)
	 */
	private final String trackId;

	/**
	 * An optional map of implementation dependent properties
	 */
	private final Map<String, Object> properties;

	/**
	 * Item with optional tracking Id
	 * 
	 * @param id
	 *            item id (e.g. product id) (mandatory)
	 * @param trackId
	 *            tracking id (generated by the recommender engine and tracked
	 *            through the entire session)
	 * @throws IllegalArgumentException
	 *             if mandatory id field is null or empty string
	 */
	public RecommendationItem(String id, String trackId) throws IllegalArgumentException {
		super();
		if (id == null || id.length() == 0)
			throw new IllegalArgumentException("id cannot be null");
		this.id = id;
		this.trackId = trackId;
		properties = new HashMap<String, Object>();
	}

	/**
	 * An item with id
	 * 
	 * @param id
	 *            item id (mandatory)
	 * @throws IllegalArgumentException
	 *             if mandatory id is null or empty
	 */
	public RecommendationItem(String id) throws IllegalArgumentException {
		this(id, null);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final RecommendationItem other = (RecommendationItem) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
	
	@Override
	public String toString() {
		return this.getClass().getSimpleName() + "["
				+ "id=" + id
				+ (trackId != null ? ", trackId=" + trackId : "")
				+ (!properties.isEmpty() ? ", properties=" + properties : "")
				+ "]";
	}

	/**
	 * Getter for id
	 * 
	 * @return the id
	 */
	public String getId() {
		return id;
	}

	/**
	 * Getter for tracking id
	 * 
	 * @return the tracking id (or null)
	 */
	public String getTrackId() {
		return trackId;
	}

	/**
	 * Standard property names are:
	 * <ul>
	 * <li><b>unitPrice<b> &ndash; the price of a unit of the given item
	 * <i>(double)</i></li>
	 * <li>quantity &ndash; the number of units selected of the given item
	 * <i>(double)</i></li>
	 * </ul>
	 * 
	 * @return
	 */
	public Map<String, Object> getProperties() {
		return properties;
	}

	/**
	 * Getter for a property
	 * 
	 * @param key
	 *            property name
	 * @return property value
	 */
	public Object getProperty(String key) {
		return properties.get(key);
	}

	/**
	 * Setter for a property
	 * 
	 * @param key
	 *            property name
	 * @param value
	 *            property value
	 * @return the previous value of the property
	 */
	public Object putProperty(String key, Object value) {
		return properties.put(key, value);
	}
}
